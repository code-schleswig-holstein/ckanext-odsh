# This Python file uses the following encoding: utf-8

import json
import urllib2
import traceback

from lxml import etree
from ckan import model

from ckan.logic import get_action

from ckanext.harvest.model import HarvestObject
from ckanext.odsh.harvesters.base import ODSHBaseHarvester

from ckanext.odsh.model.statistiknord import *
import logging

log = logging.getLogger(__name__)

#def map_general_fields(package_dict, values):
#    package_dict.update({'resources': [], 'tags': [], 'groups': []})
#    package_dict.update({'title': values['Titel']})
#    package_dict.update({'notes': values['Beschreibung']})
#    package_dict.update({'license_id': values['Nutzungsbestimmungen']['ID_derLizenz'][0]]})


class StatistikamtNordHarvester(ODSHBaseHarvester):
    """
    A Harvester for Statistikamt Nord
    """

    @staticmethod
    def info():
        return {
            'name': 'statistikamt-nord',
            'title': 'Statistikamt Nord',
            'description': 'Harvests Statistikamt Nord',
            'form_config_interface': 'Text'
        }

    def gather_stage(self, harvest_job):
        url = harvest_job.source.url

        try:
            log.info('Stat_Nord_Harvester: Beginning gather stage')
            fetched_documents = self._get_content(url)
            documents_list = self.get_documents_from_content(fetched_documents)
            documents = documents_list['RegistereintragsListe']

        except Exception, e:
            log.error('traceback while reading model: %s' % traceback.format_exc())
            self._save_gather_error('Statistik-Nord-Harvester: Error while reading model [%r]' % e, harvest_job)
            return False

        try:
            used_identifiers = []
            ids = []
            for document in documents:
                try:
                    fetched_values = self.get_values_from_content(document)
                    identifier = self._create_inforeg_id(fetched_values)
                    #log.info('identifier: %s' % identifier)

                    if identifier in used_identifiers:
                        log.error("ID: already known - gather process failed ")
                        continue

                    if identifier is None:
                        log.error("ID: unknown - gather process failed ")
                        continue

                    if identifier:
                        obj = HarvestObject(guid=identifier,
                                            job=harvest_job)
                        obj.content = json.dumps(fetched_values)
                        obj.save()
                        log.info(
                            "harvest_object_id: %s, GUID: %s successfully gathered " % (str(obj.id), str(obj.guid)))
                        used_identifiers.append(identifier)
                        ids.append(obj.id)
                        log.debug('Save identifier %s from Statistik Nord' % identifier)

                except Exception, e:
                    log.error('traceback: %s' % traceback.format_exc())
                    self._save_gather_error(
                        'Statistik-Nord-Harvester: Error for the identifier %s [%r]' % (identifier, e), harvest_job)
                    continue

        except Exception, e:
            self._save_gather_error(
                'Statistik-Nord-Harvester: Error gathering the identifiers from the source server [%s]' % str(e),
                harvest_job)
            log.error(e)
            return None

        if len(ids) > 0:
            #log.info(
            #    "finished %s IDs of %s IDs successfully gathered" % (len(used_identifiers), len(documents)))
            #log.debug("List of gathered IDs: %s" % ids)
            #log.debug("gather_stage() finished: %s IDs gathered" % len(ids))
            return ids
        else:
            log.error("No records received")
            self._save_gather_error("Couldn't find any metadata files", harvest_job)
            return None

    @staticmethod
    def fetch_stage(harvest_object):
        return True

    def import_stage(self, harvest_object):
        context = {
            'model': model,
            'session': model.Session,
            'user': self._get_user_name(),
        }
        log.debug("Context: " + str(context.viewitems()))
        if not harvest_object:
            log.error('Statistik-Nord-Harvester: No harvest object received')
            return False

        if harvest_object.content is None:
            self._save_object_error('Empty content for object %s' % harvest_object.id, harvest_object, u'Import')
            return False
        else:
            log.debug("Harvest Object: " + str(harvest_object))
            self.map_fields(context, harvest_object)
            return True

    def map_fields(self, context, harvest_object):
        values = json.loads(harvest_object.content)

        package_dict = dict()
        package_dict.update({'resources': [], 'tags': [], 'groups': []})
        package_dict.update({'title': values['Titel']})
        package_dict.update({'notes': values['Beschreibung']})
        package_dict.update({'license_id': self._get_license_id(values['Nutzungsbestimmungen']['ID_derLizenz'][0])})
        package_dict.update({'author': values["VeroeffentlichendeStelle"]["Name"]})
        package_dict.update({'author_email': values["VeroeffentlichendeStelle"]["EMailAdresse"]})

        if values['Ansprechpartner']:
            package_dict.update({'maintainer': values['Ansprechpartner']['Name'],
                                 'maintainer_email': values['Ansprechpartner']['EMailAdresse']})
        try:
            package_dict['url'] = values['WeitereInformationen']['URL']
        except KeyError:
            package_dict['url'] = ""
        package_dict.update({'type': 'dataset'})

        self.add_extras(package_dict, values)

        self.add_ressources(package_dict, values)

        self.add_tags(package_dict, values)

        self.map_to_group(package_dict, values)

        source_dataset = get_action('package_show')(context.copy(), {'id': harvest_object.source.id})

        package_dict['owner_org'] = source_dataset.get('owner_org')

        # get the ID analog to Kiel Harvester
        package_dict['id'] = harvest_object.guid

        #log.debug("ID: " + str(package_dict['id']))
        #log.debug("license_id: " + str(package_dict["license_id"]))
        #log.debug("extras: " + str(package_dict["extras"]))
        #if package_dict.has_key("maintainer"):
        #log.debug("maintainer: " + str(package_dict["maintainer"]))
        #log.debug("url: " + str(package_dict["url"]))
        #log.debug("resource/file_size: " + str(package_dict["resources"]))
        #log.debug("tags: " + str(package_dict["tags"]))

        try:
            result = self._create_or_update_package(package_dict, harvest_object, package_dict_form='package_show')
            return result
        except toolkit.ValidationError, e:
            self._save_object_error('Validation Error: %s' % str(e.error_summary), harvest_object, 'Import')
            return False

    def add_extras(self, package_dict, values):
        extras = list()
        extras.append({'key': 'identifier', 'value': self._create_inforeg_id(values)})
	extras.append({'key': 'access_rights', 'value': 'Statistisches Amt für Hamburg und Schleswig-Holstein - Anstalt des öffentlichen Rechts - (Statistikamt Nord)'})
        extras.append({'key': 'temporal_start', 'value': values['ZeitraumVon']})
        extras.append({'key': 'temporal_end', 'value': values['ZeitraumBis']})
	extras.append({'key': 'spatial', 'value': '{"type":"MultiPolygon","coordinates": [[[[10.63889, 53.78767],[10.63820, 53.78953],[10.64581, 53.78820],[10.63889, 53.78767]]],[[[8.56339, 54.75237],[8.58599, 54.74404],[8.58876, 54.74100],[8.58438, 54.73043],[8.59707, 54.71906],[8.58184, 54.71020],[8.57192, 54.69262],[8.57677, 54.69249],[8.56639, 54.67967],[8.48496, 54.68033],[8.46513, 54.68416],[8.45221, 54.69262],[8.42499, 54.69526],[8.40239, 54.70015],[8.39639, 54.70412],[8.39501, 54.71403],[8.40446, 54.73016],[8.42730, 54.74616],[8.47043, 54.75224],[8.48566, 54.74959],[8.51426, 54.75435],[8.51726, 54.75105],[8.53410, 54.75580],[8.56339, 54.75237]]],[[[8.70502, 54.55753],[8.71078, 54.55290],[8.70594, 54.53757],[8.69671, 54.52382],[8.68702, 54.52104],[8.69671, 54.51747],[8.68864, 54.51073],[8.68726, 54.50901],[8.66996, 54.49447],[8.63812, 54.48945],[8.62059, 54.48998],[8.59222, 54.50862],[8.58738, 54.52236],[8.59061, 54.53162],[8.59776, 54.53426],[8.62613, 54.53558],[8.64181, 54.54563],[8.66834, 54.54946],[8.68633, 54.55713],[8.70502, 54.55753]]],[[[8.34011, 54.68813],[8.36179, 54.64979],[8.38324, 54.63961],[8.37932, 54.63274],[8.38486, 54.62851],[8.40031, 54.62877],[8.40193, 54.62613],[8.38647, 54.62309],[8.39454, 54.61807],[8.40031, 54.62098],[8.39547, 54.61318],[8.36456, 54.60948],[8.29490, 54.66460],[8.29374, 54.67041],[8.30920, 54.68429],[8.32235, 54.68852],[8.34172, 54.70412],[8.35925, 54.71139],[8.34080, 54.69672],[8.34011, 54.68813]]],[[[8.65681, 54.64371],[8.64689, 54.63935],[8.60722, 54.63314],[8.59660, 54.63591],[8.58461, 54.63406],[8.56916, 54.62679],[8.56201, 54.62706],[8.54747, 54.61780],[8.52879, 54.62732],[8.54055, 54.63644],[8.55370, 54.63552],[8.60260, 54.64199],[8.63697, 54.64926],[8.65196, 54.65759],[8.66350, 54.65587],[8.65681, 54.64371]]],[[[8.51841, 54.57868],[8.53271, 54.57524],[8.55001, 54.57947],[8.55716, 54.57854],[8.56154, 54.57246],[8.57538, 54.56532],[8.57561, 54.56043],[8.56431, 54.55713],[8.54794, 54.55700],[8.53640, 54.56532],[8.51287, 54.57207],[8.50872, 54.57735],[8.51841, 54.57868]]],[[[8.73754, 54.64331],[8.73754, 54.63459],[8.72877, 54.62891],[8.71909, 54.62732],[8.71032, 54.63155],[8.71747, 54.64080],[8.73754, 54.64331]]],[[[8.81573, 54.55277],[8.82819, 54.54973],[8.82427, 54.54325],[8.78944, 54.55184],[8.80466, 54.55568],[8.81573, 54.55277]]],[[[8.69902, 54.68086],[8.71309, 54.68006],[8.70986, 54.67266],[8.68356, 54.67200],[8.68126, 54.67583],[8.69072, 54.67623],[8.69902, 54.68086]]],[[[8.82957, 54.60406],[8.83303, 54.60379],[8.81873, 54.59480],[8.80812, 54.60392],[8.81481, 54.60181],[8.82404, 54.60525],[8.82957, 54.60406]]],[[[8.55278, 54.45971],[8.54494, 54.46539],[8.54770, 54.46856],[8.56201, 54.46473],[8.55278, 54.45971]]],[[[8.73131, 54.46764],[8.73639, 54.46777],[8.72716, 54.46235],[8.71839, 54.46645],[8.73131, 54.46764]]],[[[8.77145, 54.63697],[8.76268, 54.63525],[8.76130, 54.63578],[8.76637, 54.63790],[8.77145, 54.63697]]],[[[8.36433, 54.86803],[8.36710, 54.86856],[8.36202, 54.86724],[8.36041, 54.86962],[8.36433, 54.86803]]],[[[8.34587, 54.87609],[8.34680, 54.87464],[8.34541, 54.87385],[8.34472, 54.87570],[8.34587, 54.87609]]],[[[8.69256, 54.06037],[8.70040, 54.05773],[8.68426, 54.05244],[8.68956, 54.04848],[8.70110, 54.04808],[8.68818, 54.04544],[8.67941, 54.05072],[8.67964, 54.06183],[8.68564, 54.06804],[8.69787, 54.07121],[8.69994, 54.06778],[8.69233, 54.06381],[8.69256, 54.06037]]],[[[11.08615, 54.53056],[11.16550, 54.52250],[11.18856, 54.51509],[11.19687, 54.50901],[11.23331, 54.50161],[11.24184, 54.49434],[11.25269, 54.47174],[11.26860, 54.46315],[11.27944, 54.44596],[11.29813, 54.43076],[11.31266, 54.40221],[11.24646, 54.41186],[11.21347, 54.41146],[11.19756, 54.40670],[11.19387, 54.41331],[11.20909, 54.41358],[11.21117, 54.41490],[11.21047, 54.41741],[11.19202, 54.41900],[11.19110, 54.42177],[11.17380, 54.41992],[11.16619, 54.41278],[11.18049, 54.40551],[11.17749, 54.40208],[11.12098, 54.40208],[11.09514, 54.40948],[11.09491, 54.42256],[11.10183, 54.43155],[11.09514, 54.44543],[11.07646, 54.44979],[11.07484, 54.44530],[11.07392, 54.44953],[11.06308, 54.45283],[11.05339, 54.44979],[11.05339, 54.44556],[11.04786, 54.44781],[11.03102, 54.44305],[11.02295, 54.44398],[11.02202, 54.43750],[11.03286, 54.43710],[11.03748, 54.43142],[11.04371, 54.43076],[11.04717, 54.42825],[11.03817, 54.42983],[11.00888, 54.44160],[11.00426, 54.44900],[11.01026, 54.48258],[11.03125, 54.51179],[11.06423, 54.53505],[11.08615, 54.53056]]],[[[7.88386, 54.18886],[7.89424, 54.17485],[7.88962, 54.17234],[7.86909, 54.18780],[7.88386, 54.18886]]],[[[7.91938, 54.18939],[7.91823, 54.18132],[7.90923, 54.18119],[7.90139, 54.18741],[7.91938, 54.18939]]],[[[10.07024, 53.70611],[10.07907, 53.70413],[10.07377, 53.69871],[10.07146, 53.69700],[10.06570, 53.68893],[10.06062, 53.68854],[10.06708, 53.68602],[10.06916, 53.67941],[10.05047, 53.67690],[10.04078, 53.68193],[9.99880, 53.68140],[9.99050, 53.67069],[9.98888, 53.64862],[9.94829, 53.65126],[9.94517, 53.65327],[9.94529, 53.65298],[9.93514, 53.65205],[9.92084, 53.65549],[9.90469, 53.65179],[9.90469, 53.64174],[9.88509, 53.62350],[9.88970, 53.62231],[9.87263, 53.61570],[9.85810, 53.59957],[9.83965, 53.59495],[9.83665, 53.58755],[9.82488, 53.58451],[9.79813, 53.59587],[9.79005, 53.60433],[9.79813, 53.60751],[9.77068, 53.61623],[9.77022, 53.62747],[9.76376, 53.62747],[9.75361, 53.61293],[9.75914, 53.61094],[9.75568, 53.60248],[9.74853, 53.60394],[9.74346, 53.59759],[9.74715, 53.59178],[9.73631, 53.58186],[9.74254, 53.57816],[9.73700, 53.57737],[9.73446, 53.56521],[9.67218, 53.57142],[9.67218, 53.57578],[9.66342, 53.57750],[9.64128, 53.59019],[9.62282, 53.59706],[9.61267, 53.59759],[9.55547, 53.62072],[9.56608, 53.63170],[9.57185, 53.63024],[9.57346, 53.63513],[9.56954, 53.63447],[9.56193, 53.64042],[9.55109, 53.65298],[9.55362, 53.66858],[9.54855, 53.67479],[9.54809, 53.67637],[9.52202, 53.71339],[9.51764, 53.71392],[9.48789, 53.72568],[9.45628, 53.73202],[9.42976, 53.75119],[9.42238, 53.76983],[9.40992, 53.78437],[9.40854, 53.78516],[9.41131, 53.78807],[9.40715, 53.79693],[9.40485, 53.79931],[9.39447, 53.81728],[9.40185, 53.82389],[9.39931, 53.82601],[9.38824, 53.82389],[9.37671, 53.83235],[9.35433, 53.83870],[9.32757, 53.86011],[9.29551, 53.87148],[9.22401, 53.88787],[9.19840, 53.89012],[9.17880, 53.88933],[9.17880, 53.88748],[9.09276, 53.88840],[9.04432, 53.90056],[9.02933, 53.90135],[9.01203, 53.89514],[8.97028, 53.89223],[8.95482, 53.89911],[8.95713, 53.90083],[8.94467, 53.90677],[8.94260, 53.91167],[8.92253, 53.92079],[8.90938, 53.93176],[8.87778, 53.97326],[8.87755, 53.97776],[8.88309, 53.97921],[8.87871, 53.98463],[8.87340, 53.98252],[8.84757, 54.00962],[8.84203, 54.00988],[8.83257, 54.02389],[8.83649, 54.02839],[8.84780, 54.03975],[8.88009, 54.04597],[8.92714, 54.04160],[8.93937, 54.03367],[8.96382, 54.03513],[8.97904, 54.04279],[8.98550, 54.06011],[8.97143, 54.06408],[8.96843, 54.06196],[8.95875, 54.06341],[8.95875, 54.06619],[8.97628, 54.06883],[8.97651, 54.07121],[8.94790, 54.09117],[8.95067, 54.09197],[8.92784, 54.13083],[8.91031, 54.13506],[8.89301, 54.13321],[8.86048, 54.11946],[8.85795, 54.11920],[8.85564, 54.12766],[8.83811, 54.13242],[8.82704, 54.14365],[8.81666, 54.16771],[8.80835, 54.17194],[8.80905, 54.18952],[8.81966, 54.20657],[8.83373, 54.21450],[8.83995, 54.23288],[8.83211, 54.23935],[8.83649, 54.25244],[8.84388, 54.25667],[8.84478, 54.26615],[8.84088, 54.26645],[8.84411, 54.27015],[8.84065, 54.28007],[8.82335, 54.29130],[8.78137, 54.28086],[8.77029, 54.28245],[8.76868, 54.28853],[8.74607, 54.29038],[8.72716, 54.28813],[8.72001, 54.28430],[8.71378, 54.28826],[8.69948, 54.28469],[8.69025, 54.27491],[8.68495, 54.27994],[8.67019, 54.28007],[8.65750, 54.28390],[8.63074, 54.30188],[8.60952, 54.30783],[8.60352, 54.31325],[8.59937, 54.32633],[8.60306, 54.32884],[8.60583, 54.32594],[8.60629, 54.32898],[8.60214, 54.34048],[8.62244, 54.34312],[8.63466, 54.33730],[8.64597, 54.33849],[8.65266, 54.34286],[8.64666, 54.34550],[8.65381, 54.34894],[8.65911, 54.34695],[8.69302, 54.35647],[8.69025, 54.37339],[8.65773, 54.37432],[8.64943, 54.37921],[8.65219, 54.38925],[8.66073, 54.39599],[8.67318, 54.40049],[8.68841, 54.39930],[8.72485, 54.40313],[8.72416, 54.40578],[8.74584, 54.40697],[8.74930, 54.40789],[8.82681, 54.41424],[8.83004, 54.41278],[8.82727, 54.40895],[8.83511, 54.41133],[8.84272, 54.40816],[8.85195, 54.40868],[8.85241, 54.40617],[8.88932, 54.41120],[8.91653, 54.42574],[8.93614, 54.44160],[8.94583, 54.44490],[8.94952, 54.44821],[8.94652, 54.45006],[8.96105, 54.45746],[8.97605, 54.45931],[8.97697, 54.45746],[8.99727, 54.46248],[8.99358, 54.46685],[9.00672, 54.47702],[9.00349, 54.47901],[9.01318, 54.48443],[9.01041, 54.49685],[8.99081, 54.51086],[8.99081, 54.52329],[8.98320, 54.52461],[8.94560, 54.51285],[8.94906, 54.50042],[8.93084, 54.49117],[8.92461, 54.47795],[8.91653, 54.47517],[8.91607, 54.47055],[8.92461, 54.46751],[8.89900, 54.45878],[8.84180, 54.46063],[8.80697, 54.47015],[8.81919, 54.48654],[8.80928, 54.49011],[8.80651, 54.49831],[8.81366, 54.50399],[8.83580, 54.50769],[8.87155, 54.52831],[8.87778, 54.54550],[8.86856, 54.56176],[8.89231, 54.59811],[8.88586, 54.60895],[8.84641, 54.62547],[8.83165, 54.65270],[8.77860, 54.66513],[8.75276, 54.68125],[8.75161, 54.69896],[8.74123, 54.71641],[8.71955, 54.72567],[8.69579, 54.72448],[8.68610, 54.73029],[8.68910, 54.73254],[8.69418, 54.73095],[8.70663, 54.73941],[8.68841, 54.77537],[8.67549, 54.79044],[8.66188, 54.79044],[8.65819, 54.79691],[8.65173, 54.79665],[8.64897, 54.80934],[8.64320, 54.81013],[8.63835, 54.81873],[8.63190, 54.81899],[8.63236, 54.82296],[8.60560, 54.84067],[8.60191, 54.84609],[8.60583, 54.87107],[8.59476, 54.88191],[8.57215, 54.88231],[8.57192, 54.88416],[8.54009, 54.88112],[8.53986, 54.88310],[8.51264, 54.88191],[8.48173, 54.87213],[8.45429, 54.85970],[8.45452, 54.85732],[8.42753, 54.85323],[8.41438, 54.84728],[8.40193, 54.84873],[8.37794, 54.85865],[8.36433, 54.87596],[8.34680, 54.87609],[8.34057, 54.88059],[8.33319, 54.87279],[8.33273, 54.86327],[8.30689, 54.85851],[8.29605, 54.84239],[8.29351, 54.82573],[8.30043, 54.81793],[8.29697, 54.81106],[8.29997, 54.80418],[8.29213, 54.78594],[8.30182, 54.77299],[8.30090, 54.76374],[8.29374, 54.75752],[8.29697, 54.75766],[8.29790, 54.74021],[8.27852, 54.75224],[8.28775, 54.87451],[8.30182, 54.91826],[8.39593, 55.05203],[8.41692, 55.05838],[8.44921, 55.04952],[8.46420, 55.04569],[8.44829, 55.04238],[8.43237, 55.04886],[8.39616, 55.04609],[8.40054, 55.03485],[8.42638, 55.03287],[8.42707, 55.03696],[8.43676, 55.03934],[8.42730, 55.03088],[8.43122, 55.02533],[8.43030, 55.02930],[8.44045, 55.02308],[8.43998, 55.01581],[8.41715, 55.00762],[8.39547, 55.00405],[8.37978, 54.99678],[8.35279, 54.96783],[8.36156, 54.95779],[8.35833, 54.95170],[8.36294, 54.94324],[8.36179, 54.92474],[8.36686, 54.92408],[8.36087, 54.91786],[8.36525, 54.90518],[8.38070, 54.89196],[8.42015, 54.87887],[8.43491, 54.87636],[8.48658, 54.87676],[8.50273, 54.88416],[8.59845, 54.88958],[8.62428, 54.89434],[8.62475, 54.89777],[8.63536, 54.90293],[8.63559, 54.91152],[8.65981, 54.90874],[8.66972, 54.91139],[8.68679, 54.90888],[8.72808, 54.89275],[8.75507, 54.89685],[8.77698, 54.89262],[8.77629, 54.89553],[8.79890, 54.90451],[8.81873, 54.90399],[8.82404, 54.90689],[8.83696, 54.90544],[8.84872, 54.89724],[8.85933, 54.89658],[8.89208, 54.90491],[8.91354, 54.90213],[8.94790, 54.90253],[9.01480, 54.88640],[9.04824, 54.87186],[9.09115, 54.87015],[9.11329, 54.87358],[9.14328, 54.87305],[9.24015, 54.84992],[9.24477, 54.84384],[9.23508, 54.83512],[9.23577, 54.83115],[9.25007, 54.80974],[9.27337, 54.81172],[9.28398, 54.80960],[9.28606, 54.80445],[9.29482, 54.80181],[9.29344, 54.80894],[9.32942, 54.80551],[9.34349, 54.80022],[9.34303, 54.80709],[9.37394, 54.82110],[9.37463, 54.83327],[9.37878, 54.83313],[9.38270, 54.83921],[9.40346, 54.83882],[9.41107, 54.84225],[9.41799, 54.83816],[9.41615, 54.83379],[9.42284, 54.82322],[9.43760, 54.80894],[9.42861, 54.80009],[9.43668, 54.78872],[9.43829, 54.80300],[9.44198, 54.80458],[9.44383, 54.80511],[9.45282, 54.80749],[9.45790, 54.81754],[9.46736, 54.82362],[9.49088, 54.82362],[9.49204, 54.82269],[9.50080, 54.82415],[9.51672, 54.83882],[9.52341, 54.83683],[9.54002, 54.84834],[9.57185, 54.85706],[9.57369, 54.86367],[9.58476, 54.86525],[9.58638, 54.87385],[9.59376, 54.87834],[9.59307, 54.87662],[9.61406, 54.87623],[9.59976, 54.86671],[9.58984, 54.85111],[9.59330, 54.84014],[9.60437, 54.83075],[9.62352, 54.83168],[9.65373, 54.82044],[9.66273, 54.82348],[9.71186, 54.80855],[9.76076, 54.80141],[9.77229, 54.79586],[9.79190, 54.79784],[9.80781, 54.77907],[9.83273, 54.76070],[9.84564, 54.75607],[9.87448, 54.75237],[9.88232, 54.76387],[9.89454, 54.77114],[9.89316, 54.76770],[9.90216, 54.76691],[9.90538, 54.76334],[9.90677, 54.76929],[9.90354, 54.77339],[9.89962, 54.77272],[9.90423, 54.78171],[9.90169, 54.78793],[9.90931, 54.79996],[9.91300, 54.79546],[9.95728, 54.77986],[9.97689, 54.75686],[9.98888, 54.71826],[10.03525, 54.68958],[10.03663, 54.68257],[10.03409, 54.67279],[10.03317, 54.67808],[10.02741, 54.67861],[10.03502, 54.68429],[10.02441, 54.68205],[10.03063, 54.68733],[10.02625, 54.68429],[10.02164, 54.68442],[10.03017, 54.69037],[10.02648, 54.69183],[10.02441, 54.68720],[10.02025, 54.68839],[10.02325, 54.69222],[10.01656, 54.69381],[9.99304, 54.68191],[9.98796, 54.68495],[9.99419, 54.68918],[9.99188, 54.69910],[9.98335, 54.70095],[9.97274, 54.68998],[9.97897, 54.68786],[9.97804, 54.68244],[9.96789, 54.68323],[9.96259, 54.67887],[9.94852, 54.67821],[9.93768, 54.67292],[9.92984, 54.63380],[9.93168, 54.63155],[9.93445, 54.63472],[9.93699, 54.63287],[9.93145, 54.62811],[9.91369, 54.62891],[9.90908, 54.63446],[9.90562, 54.63102],[9.90931, 54.62785],[9.89155, 54.62283],[9.87655, 54.60961],[9.85948, 54.60220],[9.83388, 54.59745],[9.83388, 54.59480],[9.83942, 54.59441],[9.82604, 54.59150],[9.82235, 54.58476],[9.81912, 54.58370],[9.81543, 54.58462],[9.81197, 54.57987],[9.79790, 54.57762],[9.79328, 54.57378],[9.77275, 54.57524],[9.78129, 54.57894],[9.77022, 54.58039],[9.76330, 54.56757],[9.76883, 54.56810],[9.76906, 54.56506],[9.75338, 54.55766],[9.73792, 54.54206],[9.73493, 54.53228],[9.72593, 54.53082],[9.72016, 54.53426],[9.71370, 54.53307],[9.71993, 54.53030],[9.71209, 54.52012],[9.70286, 54.51946],[9.69733, 54.52739],[9.65858, 54.52263],[9.64658, 54.52382],[9.65004, 54.52065],[9.63920, 54.52144],[9.63389, 54.51311],[9.62582, 54.52170],[9.63320, 54.52633],[9.62698, 54.53109],[9.60368, 54.52633],[9.60552, 54.52131],[9.59722, 54.51893],[9.58707, 54.51020],[9.57323, 54.51245],[9.55778, 54.51086],[9.55662, 54.51298],[9.54532, 54.50901],[9.56031, 54.50174],[9.57577, 54.50135],[9.62467, 54.51179],[9.63874, 54.50796],[9.64058, 54.51073],[9.64773, 54.51034],[9.66480, 54.50690],[9.67518, 54.49606],[9.68418, 54.49540],[9.69179, 54.49038],[9.71047, 54.49315],[9.70932, 54.50756],[9.69848, 54.51496],[9.69710, 54.51853],[9.71509, 54.51708],[9.72178, 54.52924],[9.72708, 54.52845],[9.72247, 54.52157],[9.72593, 54.51999],[9.73562, 54.52501],[9.73469, 54.52712],[9.74254, 54.52990],[9.73931, 54.53598],[9.74461, 54.53638],[9.74923, 54.54682],[9.76053, 54.54880],[9.76560, 54.55568],[9.77368, 54.55845],[9.77944, 54.55660],[9.77437, 54.55277],[9.77806, 54.55356],[9.80251, 54.56665],[9.81981, 54.58264],[9.83826, 54.58410],[9.84172, 54.59137],[9.84449, 54.58859],[9.84864, 54.59229],[9.87794, 54.59864],[9.90562, 54.61463],[9.91876, 54.61635],[9.93283, 54.62388],[9.93814, 54.62335],[9.93583, 54.62838],[9.94298, 54.63657],[9.94529, 54.63671],[9.93676, 54.65045],[9.94160, 54.65495],[9.93814, 54.66063],[9.94114, 54.66711],[9.94875, 54.67438],[9.95751, 54.67557],[9.98888, 54.67028],[9.98842, 54.66394],[9.99050, 54.66658],[9.99788, 54.66539],[10.00296, 54.67411],[10.01034, 54.66156],[10.01610, 54.66433],[10.03017, 54.66407],[10.03294, 54.66909],[10.02810, 54.67226],[10.03525, 54.67041],[10.03271, 54.66248],[10.01679, 54.66367],[10.01426, 54.66023],[10.02487, 54.65812],[10.03248, 54.66023],[10.03456, 54.65759],[10.03110, 54.63657],[10.03363, 54.62071],[10.02671, 54.60353],[10.02764, 54.58383],[10.02256, 54.58264],[10.02764, 54.58145],[10.02671, 54.55026],[10.01472, 54.54510],[9.99580, 54.51972],[9.96467, 54.50254],[9.86894, 54.47332],[9.84426, 54.47650],[9.83572, 54.47517],[9.83296, 54.47359],[9.84172, 54.47398],[9.84380, 54.46129],[9.85787, 54.45059],[9.86756, 54.44808],[9.91369, 54.45231],[9.92315, 54.45971],[9.92453, 54.45720],[9.93237, 54.46090],[9.92315, 54.46024],[9.92430, 54.46235],[9.99742, 54.46856],[10.02095, 54.47544],[10.12797, 54.48509],[10.15819, 54.47517],[10.18887, 54.45773],[10.19925, 54.45574],[10.19556, 54.44979],[10.18449, 54.44715],[10.17503, 54.43618],[10.16903, 54.43539],[10.16820, 54.43122],[10.16926, 54.43142],[10.18887, 54.41106],[10.19279, 54.39031],[10.17618, 54.38978],[10.16119, 54.38516],[10.16673, 54.37789],[10.15404, 54.36890],[10.13951, 54.36850],[10.14850, 54.36639],[10.13905, 54.36572],[10.15196, 54.36334],[10.14712, 54.36348],[10.14989, 54.35925],[10.14550, 54.36110],[10.14135, 54.35396],[10.15519, 54.34497],[10.15773, 54.33836],[10.13628, 54.31748],[10.13259, 54.31126],[10.14873, 54.32184],[10.15219, 54.31972],[10.15058, 54.32395],[10.16073, 54.32263],[10.17042, 54.32898],[10.16696, 54.33559],[10.17065, 54.33757],[10.17711, 54.33453],[10.17295, 54.33757],[10.17411, 54.34576],[10.17826, 54.36110],[10.19602, 54.36599],[10.19371, 54.37921],[10.20801, 54.38740],[10.20917, 54.39666],[10.21609, 54.39930],[10.22601, 54.41384],[10.28990, 54.41939],[10.29405, 54.42587],[10.27998, 54.42032],[10.27606, 54.42151],[10.30282, 54.43340],[10.32819, 54.43565],[10.38793, 54.42640],[10.47374, 54.39243],[10.53994, 54.37987],[10.59968, 54.36374],[10.63889, 54.34788],[10.64927, 54.33334],[10.67810, 54.32144],[10.68456, 54.31034],[10.71386, 54.30505],[10.73969, 54.30955],[10.75861, 54.30598],[10.78951, 54.31219],[10.82919, 54.33003],[10.87186, 54.35832],[10.90692, 54.36771],[10.93114, 54.38198],[10.94936, 54.38476],[10.96136, 54.38172],[11.02133, 54.38066],[11.02341, 54.37670],[11.01695, 54.37577],[11.01972, 54.37881],[11.01833, 54.38000],[11.00588, 54.37445],[11.00588, 54.37881],[10.99803, 54.37524],[10.99803, 54.37789],[10.99227, 54.37590],[10.99388, 54.37921],[10.98742, 54.37577],[10.98627, 54.38013],[10.98004, 54.37603],[10.99204, 54.37048],[10.99919, 54.36956],[11.00680, 54.37299],[11.02364, 54.36771],[11.07784, 54.37894],[11.07692, 54.37683],[11.09099, 54.39190],[11.10760, 54.39745],[11.11037, 54.39309],[11.11337, 54.39110],[11.10852, 54.39269],[11.10967, 54.38912],[11.11844, 54.39229],[11.11844, 54.39441],[11.13066, 54.38806],[11.12559, 54.37366],[11.08223, 54.35290],[11.06862, 54.35832],[11.06193, 54.35766],[11.05801, 54.35237],[11.06285, 54.34418],[11.07577, 54.34669],[11.07208, 54.33664],[11.08384, 54.27927],[11.08200, 54.25178],[11.09330, 54.19864],[11.07046, 54.19282],[11.04693, 54.17657],[10.95513, 54.14114],[10.92630, 54.11840],[10.87740, 54.08800],[10.86586, 54.08483],[10.85410, 54.08919],[10.82388, 54.08906],[10.81373, 54.09408],[10.81512, 54.10175],[10.81051, 54.10558],[10.81235, 54.09725],[10.80013, 54.09831],[10.80036, 54.09263],[10.80289, 54.09501],[10.80658, 54.09183],[10.79182, 54.07597],[10.75607, 54.05548],[10.75192, 54.03711],[10.78467, 53.99930],[10.80174, 53.99217],[10.81189, 53.99256],[10.80912, 53.99574],[10.84095, 53.99190],[10.86079, 53.99375],[10.87694, 53.98741],[10.88455, 53.97815],[10.88201, 53.96758],[10.88662, 53.96176],[10.88270, 53.95872],[10.90369, 53.95687],[10.90946, 53.94749],[10.89631, 53.93599],[10.89516, 53.92449],[10.89862, 53.92237],[10.91292, 53.92409],[10.92976, 53.91827],[10.93921, 53.91933],[10.94936, 53.91285],[10.96159, 53.91418],[10.96713, 53.90717],[10.95905, 53.91021],[10.93668, 53.90069],[10.91107, 53.89792],[10.90208, 53.90625],[10.91130, 53.91523],[10.89608, 53.91788],[10.88247, 53.92449],[10.87463, 53.91457],[10.85918, 53.90942],[10.85548, 53.90479],[10.84833, 53.90506],[10.84718, 53.89699],[10.81881, 53.89356],[10.79943, 53.87611],[10.77083, 53.87346],[10.75953, 53.85826],[10.74776, 53.85152],[10.75376, 53.84848],[10.74776, 53.83341],[10.75814, 53.82799],[10.76299, 53.81120],[10.76668, 53.80089],[10.77245, 53.79719],[10.76599, 53.77988],[10.77014, 53.77551],[10.75838, 53.76362],[10.75838, 53.74749],[10.77245, 53.74934],[10.80589, 53.73916],[10.81097, 53.72000],[10.82550, 53.71074],[10.84326, 53.70783],[10.84603, 53.70440],[10.85226, 53.70585],[10.85087, 53.70017],[10.86287, 53.70400],[10.88040, 53.70228],[10.88801, 53.70572],[10.92215, 53.69951],[10.92607, 53.69210],[10.91892, 53.68920],[10.92722, 53.68959],[10.92907, 53.68655],[10.93714, 53.68735],[10.94175, 53.68457],[10.94429, 53.67413],[10.94014, 53.67294],[10.93875, 53.66567],[10.94452, 53.65919],[10.94913, 53.66117],[10.94936, 53.65826],[10.95513, 53.65853],[10.95259, 53.64848],[10.94959, 53.64531],[10.94775, 53.64240],[10.92953, 53.62866],[10.92215, 53.60222],[10.91776, 53.59891],[10.92376, 53.58424],[10.91038, 53.57182],[10.89493, 53.57234],[10.86263, 53.56454],[10.85018, 53.56521],[10.84095, 53.57552],[10.82273, 53.57499],[10.82665, 53.56719],[10.82434, 53.55622],[10.83196, 53.54260],[10.81927, 53.53454],[10.82158, 53.52396],[10.81443, 53.52198],[10.82458, 53.51788],[10.82434, 53.51379],[10.81074, 53.51616],[10.78652, 53.51048],[10.77775, 53.49515],[10.76506, 53.49105],[10.75607, 53.48338],[10.73116, 53.47942],[10.72677, 53.48140],[10.72078, 53.47611],[10.70163, 53.47823],[10.69287, 53.45509],[10.65204, 53.46144],[10.64189, 53.45576],[10.63243, 53.45509],[10.62252, 53.42575],[10.61790, 53.42522],[10.61652, 53.40526],[10.62136, 53.39852],[10.61652, 53.38451],[10.59899, 53.37777],[10.59507, 53.36389],[10.57615, 53.36005],[10.55701, 53.36878],[10.49888, 53.37446],[10.41930, 53.40209],[10.37202, 53.42482],[10.33050, 53.42509],[10.30835, 53.43315],[10.31827, 53.43527],[10.31550, 53.44122],[10.32588, 53.44968],[10.31158, 53.45232],[10.30789, 53.44293],[10.30097, 53.44359],[10.29567, 53.44875],[10.29774, 53.45153],[10.26937, 53.46408],[10.27283, 53.46778],[10.26522, 53.46990],[10.26430, 53.47519],[10.25968, 53.47439],[10.25784, 53.47810],[10.25207, 53.47730],[10.23846, 53.48325],[10.23500, 53.49250],[10.23892, 53.49700],[10.23892, 53.49700],[10.22601, 53.49541],[10.21862, 53.49911],[10.22393, 53.50572],[10.21055, 53.52000],[10.20017, 53.51418],[10.18979, 53.51260],[10.16373, 53.52039],[10.16165, 53.52595],[10.16696, 53.53745],[10.15542, 53.53639],[10.15104, 53.54498],[10.16050, 53.55767],[10.14920, 53.56203],[10.14735, 53.56626],[10.16165, 53.58569],[10.16557, 53.58252],[10.20156, 53.58411],[10.19164, 53.59561],[10.19671, 53.60037],[10.18887, 53.61306],[10.20548, 53.62350],[10.21724, 53.62561],[10.22185, 53.63368],[10.18956, 53.63817],[10.19856, 53.64663],[10.19533, 53.65483],[10.18749, 53.65721],[10.18287, 53.66368],[10.17388, 53.66448],[10.17249, 53.66897],[10.15588, 53.66950],[10.16027, 53.67148],[10.15404, 53.67585],[10.14320, 53.67558],[10.14020, 53.68008],[10.15058, 53.68245],[10.15934, 53.69078],[10.15750, 53.70506],[10.17388, 53.71286],[10.18172, 53.70929],[10.19371, 53.73097],[10.16280, 53.73811],[10.16142, 53.73335],[10.12636, 53.71960],[10.12105, 53.71339],[10.11506, 53.71643],[10.10399, 53.71484],[10.10237, 53.71748],[10.08184, 53.72039],[10.07631, 53.71524],[10.08000, 53.71405],[10.07515, 53.71101],[10.07100, 53.71233],[10.07052, 53.70942],[10.07354, 53.70916],[10.07024, 53.70611]]]]}'})
        package_dict['extras'] = extras

    def add_tags(self, package_dict, values):
        tags = values['Schlagwoerter']['Schlagwort']
        for tag in tags:
            seperated_tags = tag.split(',')
            for seperated_tag in seperated_tags:
                if seperated_tag != '' and len(seperated_tag) < 100:
                    package_dict['tags'].append({'name': seperated_tag.strip()})

    def add_ressources(self, package_dict, values):
        resources = values['Ressourcen']['Ressource']
        for resource in resources:
            resource_dict = dict()
            resource_dict['name'] = resource['Ressourcenname']
            resource_dict['format'] = resource['Format'].get('FormatTyp', "")
            resource_dict['url'] = resource['URLZumDownload']
            if resource['Dateigroesse'] == "0" or len(resource['Dateigroesse']) == 0:
                resource_file = urllib2.urlopen(resource['url'])
                resource_dict['file_size'] = resource_file['Content-Length']
            else:
                file_size = int(round(float(resource['Dateigroesse']) * 1000000000))
                resource_dict['size'] = file_size
            package_dict['resources'].append(resource_dict)

    @staticmethod
    def map_to_group(package_dict, values):
        # open file with the mapping from numbers to DCAT-DE vocabulary:
        with open('/usr/lib/ckan/default/src/ckanext-odsh/ckanext/odsh/harvesters/number_dcat_de_hamburg.json') as f:
            dcat_theme = json.load(f)
        # get the code
        code = values['StANKategorie']

#        all_authority_codes = ['agri', 'educ', 'envi', 'ener', 'tran', 'tech',
#                           'econ', 'soci', 'heal', 'gove', 'regi', 'just', 'intr']

        # check, if StANProdukte has id 4
#        if '4' in values['StANProdukte']:
#            for item in all_authority_codes:
#                package_dict['groups'].append({'name' : item})

        # or if possible map it to a group
        if dcat_theme.has_key(str(code)):
                for item in dcat_theme[str(code)]:
                    package_dict['groups'].append({'name': item})
        else:
            # put it in the na-group
#            package_dict['groups'].append({'name': 'na'})
            log.error('Statistik-Nord-Harvester: No valid group code received: %s', code)

    @staticmethod
    def _get_content(url):
        url = url.replace(' ', '%20')
        #log.debug("get_content StatistikNord harvester: %s" % url)
        try:
            http_response = urllib2.urlopen(url, timeout=100000)
            content = http_response.read()
            return content
        except Exception, e:
            log.error('traceback WebHarvester could not get content!: %s' % traceback.format_exc())
            log.debug("Error in _get_content %s" % e)
            raise e

    @staticmethod
    def get_documents_from_content(content):
        fetched_xml = etree.fromstring(content)
        fetched_string = etree.tostring(fetched_xml)

        fetched_document = StatistikNordDocuments(fetched_string)

        fetched_values = fetched_document.read_values()
        return fetched_values

    @staticmethod
    def get_values_from_content(content):
        fetched_xml = etree.fromstring(content)
        fetched_string = etree.tostring(fetched_xml)
        fetched_document = StatistikNordDocument(fetched_string)
        fetched_values = fetched_document.read_values()

        return fetched_values

    @staticmethod
    def _create_inforeg_id(values):
        guid = values['DokumentID']
        quelle = values['Quelle']
        if guid.startswith(quelle):
            return guid.strip()
        else:
            return quelle + ':' + guid.strip()



    @staticmethod
    def get_all_groups():
        result_groups = []
        groups_in_database = model.Session.query(model.Group.name).filter(model.Group.state == 'active')
        for group_in_database in groups_in_database.all():
            result_groups.append(group_in_database.name)

        return result_groups


class ContentFetchError(Exception):
    pass


class ContentNotFoundError(ContentFetchError):
    pass


class RemoteResourceError(Exception):
    pass


class SearchError(Exception):
    pass
